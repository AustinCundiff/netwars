#!/usr/bin/python

from threading import Thread
import time
import exploits
import random
import sys

class MainLoop(Thread):
	def __init__(self,timewait):
		super(MainLoop,self).__init__()
		self.true_timer = timewait
		self.handle = exploits.Exploits()
		self.funcs = self.handle.exploits
		self.exit = False
		self.set_timer()

	def set_timer(self):
		self.jitter_timer = self.true_timer + random.randint(0,int(self.true_timer*0.1))

	def run(self):
		start = time.time()					
		while True:
			if self.exit:
				return
			
			# On a relatively variable timer, run the actual exploits
			if time.time()-start >= self.jitter_timer:
				reload(exploits)
				start = time.time()
				self.set_timer()
				try:
					self.handle.run_exploits()
				except Exception as e:
					print("[Exploit error]: {}".format(e))

			# Every time this runs there's a 10% chance of the false exploits being run
			if random.randint(0,9) == 0:
				try:
					self.handle.run_fluff()
				except Exception as e:
					print("[Fluff error]: {}".format(e))
			
					

			sleep = float(self.jitter_timer) / 50
			while sleep < 1 and sleep * 10 <= self.jitter_timer:
				sleep *= 10
			time.sleep(sleep)
				
if __name__ == '__main__':
	#print(exploits.SERVICES)

	x = MainLoop(300)
	x.start()
	
	while True:
		new_timer = input("New time interval (in seconds): ")
		if new_timer.isdigit():
			x.true_timer = int(new_timer)
		if new_timer.lower() == 'q' or new_timer.lower() == 'exit':
			x.exit = True
			sys.exit(0)
